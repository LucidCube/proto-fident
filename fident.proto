syntax = "proto3";

package fident;

service Auth {
  // Pre-authentication methods
  rpc GetAuthenticationChallenge(AuthChallengeRequest) returns (AuthChallengeResponse) {};
  rpc PerformAuthentication(PerformAuthRequest) returns (AuthResponse) {};

  // Account generation / management
  rpc GetNewAuthenticationKey(AuthKeyRequest) returns (AuthKeyResponse) {};
  rpc CreateServiceAccount(ServiceRegistrationRequest) returns (ServiceRegistrationResponse) {};

  // Identity queries
  rpc GetLastLoginTimestamps(LoginTimestampRequest) returns (LoginTimestampResponse) {};
  rpc GetAccountDetails(AccountDetailRequest) returns (AccountDetailResponse) {};
}

message ServiceRegistrationResponse {
  string identity_id = 1;
  string service_key = 2;
}

message ServiceRegistrationRequest {
  string service_name = 1;
  string service_vendor = 2;
  string support_email = 3;
}

message AuthResponse {
  string token = 1;
}

message AuthChallengeResponse {
  string challenge = 1;
}

message AuthChallengeRequest {
  string identity_id = 1;
  string project_id = 2;
}

message PerformAuthRequest {
  string identity_id = 1;
  string key_handle = 2;
  string project_id = 3;
  string challenge_response = 4;
}

message AuthKeyRequest {
  string username = 1;
  string password = 2;
  string usage_description = 3;
}

message AuthKeyResponse {
  string username = 1;
  string identity_id = 2;
  string private_key = 3;
  string key_handle = 4;
}

message LoginTimestampResponse {
  map<string, int64> results = 1;
}

message LoginTimestampRequest {
  repeated string identity_id = 1;
}

message AccountAttribute{ 
  string key = 1;
  string value = 2;
}

message AccountDetail {
  string identity_id = 1;
  string username = 2;
  string type = 3;
  repeated AccountAttribute attributes = 4;
  string verified = 5;
  string key_handle = 6;
}

message AccountDetailResponse {
  repeated AccountDetail results = 1;
}

message AccountDetailRequest {
  repeated string identity_id = 1;
}
